<?xml version="1.0" encoding="UTF-8"?>

<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!--
        scan：
            当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
        scanPeriod：
            当scan为true时，此属性生效；
            设置监测配置文件是否有修改的时间间隔；
            如果没有给出时间单位，默认单位是毫秒；
            默认的时间间隔为1分钟；
            可选时间间隔单位包括：milliseconds, seconds, minutes / hours
        debug：
            当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态，默认值为false
    -->

    <!-- 上下文名称设置 -->
    <!-- 每个 logger 都关联到上下文，默认上下文名称为“default”，但可以使用设置成其他名字，用于区分不同应用程序的记录 -->
    <!-- 若 spring boot 应用程序已设置 spring.application.name，则无需再次设置（有可能引发重命名异常） -->
    <!--<contextName>appName</contextName>-->

    <!-- 环境变量设置 -->
    <springProperty scope="context" name="appName" source="spring.application.name"/>
    <property name="LOG_PATH" value="/data/applogs/${appName:-}"/>
    <property name="LOG_FILE" value="${appName:-}"/>

    <!-- Spring Boot 运行环境下，logback 辅助 Converter（无需修改） -->
    <!-- 日志颜色Converter，用于在支持ANSI的Console下输出彩色日志
        使用方式：%clr(内容) / %clr(内容){支持颜色}；
        clr支持的颜色包括：blue / cyan / faint / green / magenta / red / yellow；
        若未指定颜色，则按照一下对应关系输出
            FATAL：red
            ERROR：red
            WARN： yellow
            INFO： green
            DEBUG：green
            TRACE：green
    -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <!-- 异常信息Converter，用于将异常信息前后追加空行 -->
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <!--
        Logback Pattern 格式及输出内容

        @@ 转换符 @@
        %contextName / %cn
            输出上下文名称
        %d{pattern} / %date{pattern}
            输出日志的打印时间，模式语法与java.text.SimpleDateFormat兼容
        %p / %le / %level
            输出日志级别
        %t / %thread
            输出产生日志的线程名
        %c{length} / %lo{length} / %logger{length}
            输出产生日志的logger名，可有一个整形参数，功能是缩短logger名，设置为0表示只输入logger最右边点符号之后的字符串
        %L / %line
            输出产生日志请求的行号，尽量避免使用，除非执行速度不造成任何问题
        %m / %msg / %message
            输出应用程序提供的信息
        %n
            输出平台相关的分行符“\n”或者“\r\n”

        %r / %relative
            输出从程序启动到产生日志记录的时间，单位是毫秒
        %C{length} / %class{length}
            输出产生日志请求的调用者的全限定名，参数%c一样，尽量避免使用，除非执行速度不造成任何问题
        %F / %file
            输出产生日志请求的java源文件名，尽量避免使用，除非执行速度不造成任何问题
        %M / method
            输出产生日志请求的方法名，尽量避免使用，除非执行速度不造成任何问题
        %caller{depth} / %caller{depth, evaluator-1, ... evaluator-n}
            输出产生日志请求的调用者的位置信息，整数选项表示输出信息深度

        %replace(p){r, t}
            p为日志内容，r是正则表达式，将p中符合r的内容替换为t
            例如："%replace(%msg){'\s', ''}"

        @@ 格式符（可选） @@
        第一位：左对齐格式符 “-”；
        第二位：最小宽度格式符，十进制数字；若输出内容小于最小宽度，则根据对齐方向自动使用空格填充（即左对齐时右填充，右对齐时左填充）；
        第三位：最大宽度格式符，符号“.”后跟十进制数字；若输出内容大于最大宽度，则自动从输出内容前端截断，若“.-”后跟数字，则从后端截断；
        例如：%-5.-10message 表示，message信息左对齐显示（-），最小宽度5字符（5），最大宽度10字符，超出部分从后端截断（.-10）
    -->

    <!-- Spring Boot运行环境下，默认LOG_PATTERN（仅用于参考，无需修改） -->
    <property name="CONSOLE_LOG_PATTERN_DEFAULT"
              value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <property name="FILE_LOG_PATTERN_DEFAULT"
              value="${FILE_LOG_PATTERN:-%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 自定义 LOG_PATTERN 设置 -->
    <!-- Console pattern（Spring Boot运行环境） -->
    <property name="CONSOLE_LOG_PATTERN_BOOT"
              value="%d{HH:mm:ss.SSS} %clr(%-5p) %clr(${PID}){magenta} [%-15.15t] traceId:[%X{X-B3-TraceId:-}] spanId:[%X{X-B3-SpanId:-}] %clr(%-60.60c{50}){cyan}:%5L - %clr(%m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx})"/>
    <!-- Console pattern -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%d{HH:mm:ss.SSS} %-5p [%-15.15t] %-60.60c{50}:%5L - %m%n"/>
    <!-- File pattern -->
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%-15.15t] traceId:[%X{X-B3-TraceId:-}] spanId:[%X{X-B3-SpanId:-}] %-60.60c{50}:%5L - %m%n"/>

    <!-- Console Appender 设置 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN_BOOT}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- File Appender 设置 -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 运行中日志文件名 -->
        <file>${LOG_PATH}/${LOG_FILE}.log</file>
        <!-- 基于日志文件大小及时间的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的模式 -->
            <!--
                模式内支持以下配置:
                %d: 自动启动按照输出日期滚动，%d: 日期格式
                %i: 自动启动按照文件大小滚动，%i: 文件序列
                .gz：自动启动滚动日志压缩存储
            -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <!-- 单个日志文件最大占用磁盘空间 -->
            <maxFileSize>50MB</maxFileSize>
            <!-- 历史日志保留天数 -->
            <maxHistory>365</maxHistory>
        </rollingPolicy>
        <encoder>
            <!-- 日志格式 -->
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- ELK json File Appender 设置 -->
    <appender name="logstash" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/${LOG_FILE}.json</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}.%d{yyyy-MM-dd}.%i.json.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>365</maxHistory>
        </rollingPolicy>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <!-- 输出 @timestamp, 即日志输出时间, 覆盖 ELK @timestamp 数据, 避免 ELK 使用扫出日志的时间排序显示, 导致日志内容乱序 -->
                <!-- @timestamp 使用默认时间格式, 与 ELK 匹配, 若需修改时间格式, 须与 ELK 配置保持一致 -->
                <timestamp/>
                <pattern>
                    <pattern>
                        {
                        "message": "${appName:-} | traceId:[%X{X-B3-TraceId:-}] | spanId:[%X{X-B3-SpanId:-}] | %level | %thread | %logger:%line \r\n\r\n%m"
                        }
                    </pattern>
                </pattern>
                <stackTrace/>
            </providers>
        </encoder>
    </appender>

    <!-- 设置指定 logger 日志输出方式 -->
    <!-- 示例 -->
    <!--
    <logger name="com.cloudloan.spring.service.TestA" level="TRACE"/>
    -->

    <!-- 设置指定 logger 使用其他 appender
        additivity=true:  表示当前 logger 和 rootLogger 的 appender-ref 都使用
        additivity=false: 表示只用当前 logger 的 appender-ref
    -->
    <!-- 示例 -->
    <!--
    <logger name="com.cloudloan.spring.service.TestB" level="ERROR" additivity="true">
        <appender-ref ref="fileB"/>
    </logger>
    -->

    <logger name="org.springframework" level="info"/>
    <logger name="org.mybatis.spring" level="info"/>
    <logger name="com.ifc.eridanus.base.mapper" level="info"/>
    <logger name="com.ifc.eridanus.facade" level="info"/>

    <!-- 全局日志输出级别设置 -->
    <root level="info">
        <appender-ref ref="console"/>
        <appender-ref ref="file"/>
        <appender-ref ref="logstash"/>
    </root>

</configuration>
